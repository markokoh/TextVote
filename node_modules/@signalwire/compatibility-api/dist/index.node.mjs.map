{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helpers.ts"],
  "sourcesContent": ["import twilio from 'twilio'\nimport { getHost, Reject } from './helpers'\nimport type { Twilio, TwimlInterface, JwtInterface } from 'twilio'\nimport type { CompatibilityAPIRestClientOptions } from './types'\n\ntwilio.twiml.FaxResponse.prototype.reject = function (attributes: any) {\n  // @ts-expect-error\n  return new Reject(this.response.ele('Reject', attributes))\n}\n\n/**\n * TBD:\n * @remarks See compatibility-api.d.ts for types\n */\nconst RestClient = function (\n  username: string,\n  token: string,\n  opts?: CompatibilityAPIRestClientOptions\n): Twilio {\n  const host = getHost(opts)\n  // \"AC\" prefix because twilio-node requires it\n  const client = twilio('AC' + username, token, opts)\n  // @ts-ignore\n  // Remove \"AC\" prefix\n  client.username = username\n  // @ts-ignore\n  client.accountSid = username\n  // @ts-ignore\n  client.password = token\n\n  // @ts-ignore\n  // Replace base url\n  client.api.baseUrl = `https://${host}`\n\n  // @ts-ignore\n  client.fax.baseUrl = `https://${host}`\n  // @ts-ignore\n  client.fax.v1._version = `2010-04-01/Accounts/${client.accountSid}`\n\n  return client\n}\n\n// Define old properties\nconst properties = Object.getOwnPropertyNames(twilio)\nfor (let i = 0; i < properties.length; i++) {\n  const newProp = properties[i] === 'twiml' ? 'LaML' : properties[i]\n  Object.defineProperty(RestClient, newProp, {\n    // @ts-expect-error\n    value: twilio[properties[i]],\n  })\n}\n\nexport { RestClient }\n\nexport type {\n  CompatibilityAPIRestClientOptions,\n  Twilio,\n  TwimlInterface,\n  JwtInterface,\n}\n", "import twilio from 'twilio'\n\nfunction Reject(reject: any) {\n  // @ts-expect-error\n  this.reject = reject\n  // @ts-expect-error\n  this._propertyName = 'reject'\n}\n\nReject.prototype = Object.create(twilio.twiml.FaxResponse.prototype)\nReject.prototype.constructor = 'Reject'\n\nconst getHost = (opts: { signalwireSpaceUrl?: string } = {}): string => {\n  const { signalwireSpaceUrl } = opts\n  if (signalwireSpaceUrl) {\n    return signalwireSpaceUrl\n  }\n  const { SIGNALWIRE_SPACE_URL, SIGNALWIRE_API_HOSTNAME } = process.env\n  if (SIGNALWIRE_SPACE_URL) {\n    return SIGNALWIRE_SPACE_URL\n  }\n  if (SIGNALWIRE_API_HOSTNAME) {\n    return SIGNALWIRE_API_HOSTNAME\n  }\n  throw new Error(\n    'SignalWire Space URL is not configured.\\nEnter your SignalWire Space domain via the SIGNALWIRE_SPACE_URL or SIGNALWIRE_API_HOSTNAME environment variables, or specifying the property \"signalwireSpaceUrl\" in the init options.'\n  )\n}\n\nexport { getHost, Reject }\n"],
  "mappings": ";AAAA;;;ACAA;AAEA,gBAAgB,QAAa;AAE3B,OAAK,SAAS;AAEd,OAAK,gBAAgB;AACvB;AAEA,OAAO,YAAY,OAAO,OAAO,OAAO,MAAM,YAAY,SAAS;AACnE,OAAO,UAAU,cAAc;AAE/B,IAAM,UAAU,CAAC,OAAwC,CAAC,MAAc;AACtE,QAAM,EAAE,uBAAuB;AAC/B,MAAI,oBAAoB;AACtB,WAAO;AAAA,EACT;AACA,QAAM,EAAE,sBAAsB,4BAA4B,QAAQ;AAClE,MAAI,sBAAsB;AACxB,WAAO;AAAA,EACT;AACA,MAAI,yBAAyB;AAC3B,WAAO;AAAA,EACT;AACA,QAAM,IAAI,MACR,iOACF;AACF;;;ADtBA,QAAO,MAAM,YAAY,UAAU,SAAS,SAAU,YAAiB;AAErE,SAAO,IAAI,OAAO,KAAK,SAAS,IAAI,UAAU,UAAU,CAAC;AAC3D;AAMA,IAAM,aAAa,SACjB,UACA,OACA,MACQ;AACR,QAAM,OAAO,QAAQ,IAAI;AAEzB,QAAM,SAAS,QAAO,OAAO,UAAU,OAAO,IAAI;AAGlD,SAAO,WAAW;AAElB,SAAO,aAAa;AAEpB,SAAO,WAAW;AAIlB,SAAO,IAAI,UAAU,WAAW;AAGhC,SAAO,IAAI,UAAU,WAAW;AAEhC,SAAO,IAAI,GAAG,WAAW,uBAAuB,OAAO;AAEvD,SAAO;AACT;AAGA,IAAM,aAAa,OAAO,oBAAoB,OAAM;AACpD,SAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,QAAM,UAAU,WAAW,OAAO,UAAU,SAAS,WAAW;AAChE,SAAO,eAAe,YAAY,SAAS;AAAA,IAEzC,OAAO,QAAO,WAAW;AAAA,EAC3B,CAAC;AACH;",
  "names": []
}
